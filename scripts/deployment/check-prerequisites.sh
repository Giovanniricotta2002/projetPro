#!/bin/bash
# check-prerequisites.sh - V√©rification des pr√©requis de d√©ploiement

set -e

echo "üîç V√©rification des pr√©requis de d√©ploiement"

# Variables de configuration
REQUIRED_GCLOUD_VERSION="400.0.0"
REQUIRED_TERRAFORM_VERSION="1.5.0"
REQUIRED_DOCKER_VERSION="20.10.0"

# Fonction pour comparer les versions
version_compare() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done
    return 0
}

# 1. Authentification GCP
echo "üîê V√©rification authentification GCP..."
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q "@"; then
    echo "‚ùå Authentification GCP requise"
    echo "üí° Ex√©cutez: gcloud auth login"
    exit 1
fi

# V√©rification version gcloud
GCLOUD_VERSION=$(gcloud version --format="value(Google Cloud SDK)" 2>/dev/null || echo "0.0.0")
version_compare $GCLOUD_VERSION $REQUIRED_GCLOUD_VERSION
if [[ $? -eq 2 ]]; then
    echo "‚ö†Ô∏è Version gcloud trop ancienne: $GCLOUD_VERSION (requis: $REQUIRED_GCLOUD_VERSION+)"
    echo "üí° Mettez √† jour: gcloud components update"
fi

echo "‚úÖ GCP: $(gcloud config get-value account 2>/dev/null)"

# 2. Acc√®s Docker Hub
echo "üê≥ V√©rification acc√®s Docker..."
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker daemon non accessible"
    echo "üí° D√©marrez Docker Desktop ou le service Docker"
    exit 1
fi

# Test push Docker (simulation)
DOCKER_USER=$(docker info --format '{{.Username}}' 2>/dev/null || echo "")
if [[ -z "$DOCKER_USER" ]]; then
    echo "‚ö†Ô∏è Authentification Docker Hub non configur√©e"
    echo "üí° Ex√©cutez: docker login"
else
    echo "‚úÖ Docker: $DOCKER_USER"
fi

# V√©rification version Docker
DOCKER_VERSION=$(docker version --format '{{.Client.Version}}' 2>/dev/null || echo "0.0.0")
version_compare $DOCKER_VERSION $REQUIRED_DOCKER_VERSION
if [[ $? -eq 2 ]]; then
    echo "‚ö†Ô∏è Version Docker trop ancienne: $DOCKER_VERSION (requis: $REQUIRED_DOCKER_VERSION+)"
fi

# 3. V√©rification Terraform
echo "üèóÔ∏è V√©rification Terraform..."
if ! command -v terraform &> /dev/null; then
    echo "‚ùå Terraform non install√©"
    echo "üí° Installez Terraform: https://developer.hashicorp.com/terraform/downloads"
    exit 1
fi

TERRAFORM_VERSION=$(terraform version -json | jq -r '.terraform_version' 2>/dev/null || echo "0.0.0")
version_compare $TERRAFORM_VERSION $REQUIRED_TERRAFORM_VERSION
if [[ $? -eq 2 ]]; then
    echo "‚ö†Ô∏è Version Terraform trop ancienne: $TERRAFORM_VERSION (requis: $REQUIRED_TERRAFORM_VERSION+)"
fi

echo "‚úÖ Terraform: $TERRAFORM_VERSION"

# 4. V√©rification kubectl
echo "‚ò∏Ô∏è V√©rification kubectl..."
if ! command -v kubectl &> /dev/null; then
    echo "‚ö†Ô∏è kubectl non install√© (optionnel pour Kubernetes)"
else
    KUBECTL_VERSION=$(kubectl version --client --output=json 2>/dev/null | jq -r '.clientVersion.gitVersion' || echo "unknown")
    echo "‚úÖ kubectl: $KUBECTL_VERSION"
fi

# 5. Tests de connectivit√©
echo "üåê Tests de connectivit√©..."

# Test GCP APIs
if ! gcloud services list --enabled --filter="name:run.googleapis.com" --format="value(name)" | grep -q "run.googleapis.com"; then
    echo "‚ùå API Cloud Run non activ√©e"
    echo "üí° Activez: gcloud services enable run.googleapis.com"
    exit 1
fi

if ! gcloud services list --enabled --filter="name:sql.googleapis.com" --format="value(name)" | grep -q "sql.googleapis.com"; then
    echo "‚ùå API Cloud SQL non activ√©e" 
    echo "üí° Activez: gcloud services enable sql.googleapis.com"
    exit 1
fi

echo "‚úÖ APIs GCP activ√©es"

# Test acc√®s repository Git
echo "üì¶ V√©rification acc√®s repository..."
if [[ -d ".git" ]]; then
    REMOTE_URL=$(git remote get-url origin 2>/dev/null || echo "")
    if [[ -n "$REMOTE_URL" ]]; then
        echo "‚úÖ Git repository: $REMOTE_URL"
    else
        echo "‚ö†Ô∏è Aucun remote Git configur√©"
    fi
else
    echo "‚ö†Ô∏è Pas dans un repository Git"
fi

# 6. V√©rification variables d'environnement
echo "‚öôÔ∏è V√©rification variables d'environnement..."

REQUIRED_VARS=(
    "GCP_PROJECT"
    "DOCKER_REGISTRY"
    "DATABASE_URL"
    "JWT_SECRET_KEY"
)

for var in "${REQUIRED_VARS[@]}"; do
    if [[ -z "${!var}" ]]; then
        echo "‚ö†Ô∏è Variable d'environnement manquante: $var"
    else
        echo "‚úÖ $var: ‚úì"
    fi
done

# 7. Tests de validation fonctionnelle
echo "üß™ Ex√©cution tests de validation..."
if [[ -f "./scripts/testing/run-smoke-tests.sh" ]]; then
    ./scripts/testing/run-smoke-tests.sh --quick
    if [[ $? -ne 0 ]]; then
        echo "‚ùå Tests de validation √©chou√©s"
        exit 1
    fi
else
    echo "‚ö†Ô∏è Script de tests de validation non trouv√©"
fi

# 8. R√©sum√© final
echo ""
echo "üìã R√©sum√© des pr√©requis:"
echo "  ‚úÖ Authentification GCP"
echo "  ‚úÖ Docker op√©rationnel"
echo "  ‚úÖ Terraform install√©"
echo "  ‚úÖ APIs GCP activ√©es"
echo "  ‚úÖ Tests de validation pass√©s"
echo ""
echo "üéâ Tous les pr√©requis sont satisfaits pour le d√©ploiement"
echo "üí° Vous pouvez maintenant ex√©cuter: ./scripts/deployment/deploy-production.sh"
