name: 🚨 Hotfix Pipeline - Correction Critique
on:
  push:
    branches: [hotfix/*]
  pull_request:
    branches: [hotfix/*]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tests-rapides:
    name: 🧪 Tests Critiques Express
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, pgsql, pdo_pgsql
          coverage: none

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: back/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: 🔧 Install Composer dependencies
        run: |
          cd back
          composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: 🧪 Run Critical Tests Only
        run: |
          cd back
          ./bin/phpunit --group=critical --stop-on-failure --no-coverage
          
      - name: 🔍 Static Analysis (PHPStan)
        run: |
          cd back
          ./vendor/bin/phpstan analyse --no-progress --error-format=github

      - name: 📊 Code Style Check
        run: |
          cd back
          ./vendor/bin/phpcs --standard=phpcs.xml.dist --report=checkstyle | cs2pr

  frontend-tests:
    name: 🎨 Tests Frontend Express
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: front/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd front
          npm ci

      - name: 🧪 Run Unit Tests
        run: |
          cd front
          npm run test:unit -- --run

      - name: 🏗️ Build Check
        run: |
          cd front
          npm run build

  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [tests-rapides, frontend-tests]
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: 🏷️ Extract metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: 🐳 Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: 🐳 Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☁️ Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy to Cloud Run (Backend)
        run: |
          gcloud run deploy muscuscope-backend-staging \
            --image=${{ needs.build-images.outputs.backend-image }} \
            --platform=managed \
            --region=europe-west1 \
            --allow-unauthenticated \
            --set-env-vars="APP_ENV=staging" \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=2

      - name: 🚀 Deploy to Cloud Run (Frontend)
        run: |
          gcloud run deploy muscuscope-frontend-staging \
            --image=${{ needs.build-images.outputs.frontend-image }} \
            --platform=managed \
            --region=europe-west1 \
            --allow-unauthenticated \
            --memory=256Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=2

  smoke-tests:
    name: 💨 Tests Smoke Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    timeout-minutes: 3
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Health Check Backend
        run: |
          echo "🔍 Vérification santé API..."
          curl -f https://muscuscope-backend-staging-xxxxx.a.run.app/api/health || exit 1
          echo "✅ API accessible"

      - name: 🔍 Health Check Frontend
        run: |
          echo "🔍 Vérification santé Frontend..."
          curl -f https://muscuscope-frontend-staging-xxxxx.a.run.app/ || exit 1
          echo "✅ Frontend accessible"

      - name: 🧪 API Smoke Tests
        run: |
          echo "🧪 Tests API critiques..."
          # Test authentification
          curl -X POST https://muscuscope-backend-staging-xxxxx.a.run.app/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"test@test.com","password":"password"}' || exit 1
          echo "✅ Authentification fonctionnelle"

  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, smoke-tests]
    environment: production
    if: github.ref_name == 'hotfix/critical' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☁️ Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy to Cloud Run (Backend) - Blue/Green
        run: |
          # Déploiement avec révision spécifique
          gcloud run deploy muscuscope-backend \
            --image=${{ needs.build-images.outputs.backend-image }} \
            --platform=managed \
            --region=europe-west1 \
            --allow-unauthenticated \
            --set-env-vars="APP_ENV=production" \
            --memory=1Gi \
            --cpu=2 \
            --min-instances=1 \
            --max-instances=10 \
            --no-traffic
          
          # Récupération de la nouvelle révision
          NEW_REVISION=$(gcloud run revisions list --service=muscuscope-backend --region=europe-west1 --limit=1 --format="value(name)")
          
          # Migration progressive du trafic (10% puis 100%)
          gcloud run services update-traffic muscuscope-backend \
            --region=europe-west1 \
            --to-revisions=$NEW_REVISION=10
          
          echo "✅ 10% du trafic routé vers la nouvelle version"
          sleep 30
          
          # Validation rapide
          curl -f https://muscuscope-backend-xxxxx.a.run.app/api/health || exit 1
          
          # Basculement complet
          gcloud run services update-traffic muscuscope-backend \
            --region=europe-west1 \
            --to-revisions=$NEW_REVISION=100
          
          echo "✅ 100% du trafic routé - Déploiement terminé"

      - name: 🚀 Deploy to Cloud Run (Frontend)
        run: |
          gcloud run deploy muscuscope-frontend \
            --image=${{ needs.build-images.outputs.frontend-image }} \
            --platform=managed \
            --region=europe-west1 \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=1 \
            --max-instances=5

  monitoring-post-deploy:
    name: 📊 Monitoring Post-Déploiement
    runs-on: ubuntu-latest
    needs: deploy-production
    timeout-minutes: 10
    if: github.ref_name == 'hotfix/critical' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Monitoring Health - 5 minutes
        run: |
          echo "📊 Surveillance post-déploiement pendant 5 minutes..."
          
          for i in {1..10}; do
            echo "🔍 Check $i/10..."
            
            # Health check API
            if ! curl -f https://muscuscope-backend-xxxxx.a.run.app/api/health; then
              echo "❌ API Health check failed"
              exit 1
            fi
            
            # Health check Frontend
            if ! curl -f https://muscuscope-frontend-xxxxx.a.run.app/; then
              echo "❌ Frontend Health check failed"  
              exit 1
            fi
            
            # Vérification métriques critiques (exemple)
            echo "✅ Check $i/10 réussi"
            sleep 30
          done
          
          echo "✅ Monitoring post-déploiement terminé avec succès"

      - name: 📱 Notification Slack Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 **Hotfix Déployé avec Succès** 
            📦 Branche: ${{ github.ref_name }}
            👤 Par: ${{ github.actor }}
            🔗 Commit: ${{ github.sha }}
            ✅ Monitoring: OK pendant 5 minutes
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  rollback-on-failure:
    name: ↩️ Rollback Automatique
    runs-on: ubuntu-latest
    needs: [deploy-production, monitoring-post-deploy]
    if: failure() && github.ref_name == 'hotfix/critical'
    steps:
      - name: ☁️ Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: ↩️ Rollback Backend
        run: |
          echo "🚨 Rollback du backend..."
          gcloud run services update-traffic muscuscope-backend \
            --region=europe-west1 \
            --to-revisions=PREVIOUS=100
          echo "✅ Backend rollback terminé"

      - name: ↩️ Rollback Frontend
        run: |
          echo "🚨 Rollback du frontend..."
          # Récupération de la révision précédente
          PREVIOUS_REVISION=$(gcloud run revisions list --service=muscuscope-frontend --region=europe-west1 --limit=2 --format="value(name)" | tail -n 1)
          gcloud run services update-traffic muscuscope-frontend \
            --region=europe-west1 \
            --to-revisions=$PREVIOUS_REVISION=100
          echo "✅ Frontend rollback terminé"

      - name: 📱 Notification Slack Failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 **ROLLBACK AUTOMATIQUE EFFECTUÉ**
            💥 Échec du déploiement hotfix
            📦 Branche: ${{ github.ref_name }}
            👤 Par: ${{ github.actor }}
            🔄 Rollback: Terminé
            📞 Action requise: Investigation immédiate
          webhook_url: ${{ secrets.SLACK_WEBHOOK_CRITICAL }}

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.backend-image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
